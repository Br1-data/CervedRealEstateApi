<?php
/**
 * Cointestatari
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Real Estate
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Cointestatari Class Doc Comment
 *
 * @category Class
 * @description Cointestatari
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Cointestatari implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Cointestatari';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id_soggetto' => 'string',
        'codice_fiscale' => 'string',
        'denominazione' => 'string',
        'data_nascita' => 'string',
        'luogo_nascita' => 'string',
        'descrizione_titolo' => 'string',
        'titolarita_orig' => 'string',
        'regime' => 'string',
        'regime_orig' => 'string',
        'quota_orig' => 'float',
        'percentuale_quota' => 'float',
        'data_aggiornamento' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id_soggetto' => null,
        'codice_fiscale' => null,
        'denominazione' => null,
        'data_nascita' => null,
        'luogo_nascita' => null,
        'descrizione_titolo' => null,
        'titolarita_orig' => null,
        'regime' => null,
        'regime_orig' => null,
        'quota_orig' => null,
        'percentuale_quota' => null,
        'data_aggiornamento' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id_soggetto' => 'idSoggetto',
        'codice_fiscale' => 'codiceFiscale',
        'denominazione' => 'denominazione',
        'data_nascita' => 'dataNascita',
        'luogo_nascita' => 'luogoNascita',
        'descrizione_titolo' => 'descrizioneTitolo',
        'titolarita_orig' => 'titolaritaOrig',
        'regime' => 'regime',
        'regime_orig' => 'regimeOrig',
        'quota_orig' => 'quotaOrig',
        'percentuale_quota' => 'percentualeQuota',
        'data_aggiornamento' => 'dataAggiornamento'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id_soggetto' => 'setIdSoggetto',
        'codice_fiscale' => 'setCodiceFiscale',
        'denominazione' => 'setDenominazione',
        'data_nascita' => 'setDataNascita',
        'luogo_nascita' => 'setLuogoNascita',
        'descrizione_titolo' => 'setDescrizioneTitolo',
        'titolarita_orig' => 'setTitolaritaOrig',
        'regime' => 'setRegime',
        'regime_orig' => 'setRegimeOrig',
        'quota_orig' => 'setQuotaOrig',
        'percentuale_quota' => 'setPercentualeQuota',
        'data_aggiornamento' => 'setDataAggiornamento'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id_soggetto' => 'getIdSoggetto',
        'codice_fiscale' => 'getCodiceFiscale',
        'denominazione' => 'getDenominazione',
        'data_nascita' => 'getDataNascita',
        'luogo_nascita' => 'getLuogoNascita',
        'descrizione_titolo' => 'getDescrizioneTitolo',
        'titolarita_orig' => 'getTitolaritaOrig',
        'regime' => 'getRegime',
        'regime_orig' => 'getRegimeOrig',
        'quota_orig' => 'getQuotaOrig',
        'percentuale_quota' => 'getPercentualeQuota',
        'data_aggiornamento' => 'getDataAggiornamento'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id_soggetto'] = isset($data['id_soggetto']) ? $data['id_soggetto'] : null;
        $this->container['codice_fiscale'] = isset($data['codice_fiscale']) ? $data['codice_fiscale'] : null;
        $this->container['denominazione'] = isset($data['denominazione']) ? $data['denominazione'] : null;
        $this->container['data_nascita'] = isset($data['data_nascita']) ? $data['data_nascita'] : null;
        $this->container['luogo_nascita'] = isset($data['luogo_nascita']) ? $data['luogo_nascita'] : null;
        $this->container['descrizione_titolo'] = isset($data['descrizione_titolo']) ? $data['descrizione_titolo'] : null;
        $this->container['titolarita_orig'] = isset($data['titolarita_orig']) ? $data['titolarita_orig'] : null;
        $this->container['regime'] = isset($data['regime']) ? $data['regime'] : null;
        $this->container['regime_orig'] = isset($data['regime_orig']) ? $data['regime_orig'] : null;
        $this->container['quota_orig'] = isset($data['quota_orig']) ? $data['quota_orig'] : null;
        $this->container['percentuale_quota'] = isset($data['percentuale_quota']) ? $data['percentuale_quota'] : null;
        $this->container['data_aggiornamento'] = isset($data['data_aggiornamento']) ? $data['data_aggiornamento'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id_soggetto
     *
     * @return string
     */
    public function getIdSoggetto()
    {
        return $this->container['id_soggetto'];
    }

    /**
     * Sets id_soggetto
     *
     * @param string $id_soggetto Identificativo univoco Cerved del Soggetto (persona fisica o giuridica)
     *
     * @return $this
     */
    public function setIdSoggetto($id_soggetto)
    {
        $this->container['id_soggetto'] = $id_soggetto;

        return $this;
    }

    /**
     * Gets codice_fiscale
     *
     * @return string
     */
    public function getCodiceFiscale()
    {
        return $this->container['codice_fiscale'];
    }

    /**
     * Sets codice_fiscale
     *
     * @param string $codice_fiscale Codice fiscale del soggetto
     *
     * @return $this
     */
    public function setCodiceFiscale($codice_fiscale)
    {
        $this->container['codice_fiscale'] = $codice_fiscale;

        return $this;
    }

    /**
     * Gets denominazione
     *
     * @return string
     */
    public function getDenominazione()
    {
        return $this->container['denominazione'];
    }

    /**
     * Sets denominazione
     *
     * @param string $denominazione Denominazione del soggetto
     *
     * @return $this
     */
    public function setDenominazione($denominazione)
    {
        $this->container['denominazione'] = $denominazione;

        return $this;
    }

    /**
     * Gets data_nascita
     *
     * @return string
     */
    public function getDataNascita()
    {
        return $this->container['data_nascita'];
    }

    /**
     * Sets data_nascita
     *
     * @param string $data_nascita Data di nascita del soggetto
     *
     * @return $this
     */
    public function setDataNascita($data_nascita)
    {
        $this->container['data_nascita'] = $data_nascita;

        return $this;
    }

    /**
     * Gets luogo_nascita
     *
     * @return string
     */
    public function getLuogoNascita()
    {
        return $this->container['luogo_nascita'];
    }

    /**
     * Sets luogo_nascita
     *
     * @param string $luogo_nascita Luogo di nascita del soggetto
     *
     * @return $this
     */
    public function setLuogoNascita($luogo_nascita)
    {
        $this->container['luogo_nascita'] = $luogo_nascita;

        return $this;
    }

    /**
     * Gets descrizione_titolo
     *
     * @return string
     */
    public function getDescrizioneTitolo()
    {
        return $this->container['descrizione_titolo'];
    }

    /**
     * Sets descrizione_titolo
     *
     * @param string $descrizione_titolo Descrizione del tipo di possesso
     *
     * @return $this
     */
    public function setDescrizioneTitolo($descrizione_titolo)
    {
        $this->container['descrizione_titolo'] = $descrizione_titolo;

        return $this;
    }

    /**
     * Gets titolarita_orig
     *
     * @return string
     */
    public function getTitolaritaOrig()
    {
        return $this->container['titolarita_orig'];
    }

    /**
     * Sets titolarita_orig
     *
     * @param string $titolarita_orig Titolarità originale (titolo, quota e regime)
     *
     * @return $this
     */
    public function setTitolaritaOrig($titolarita_orig)
    {
        $this->container['titolarita_orig'] = $titolarita_orig;

        return $this;
    }

    /**
     * Gets regime
     *
     * @return string
     */
    public function getRegime()
    {
        return $this->container['regime'];
    }

    /**
     * Sets regime
     *
     * @param string $regime Descrizione del regime di possesso
     *
     * @return $this
     */
    public function setRegime($regime)
    {
        $this->container['regime'] = $regime;

        return $this;
    }

    /**
     * Gets regime_orig
     *
     * @return string
     */
    public function getRegimeOrig()
    {
        return $this->container['regime_orig'];
    }

    /**
     * Sets regime_orig
     *
     * @param string $regime_orig Regime di possesso originale
     *
     * @return $this
     */
    public function setRegimeOrig($regime_orig)
    {
        $this->container['regime_orig'] = $regime_orig;

        return $this;
    }

    /**
     * Gets quota_orig
     *
     * @return float
     */
    public function getQuotaOrig()
    {
        return $this->container['quota_orig'];
    }

    /**
     * Sets quota_orig
     *
     * @param float $quota_orig Quota originale
     *
     * @return $this
     */
    public function setQuotaOrig($quota_orig)
    {
        $this->container['quota_orig'] = $quota_orig;

        return $this;
    }

    /**
     * Gets percentuale_quota
     *
     * @return float
     */
    public function getPercentualeQuota()
    {
        return $this->container['percentuale_quota'];
    }

    /**
     * Sets percentuale_quota
     *
     * @param float $percentuale_quota Percentuale di possesso dell'immobile
     *
     * @return $this
     */
    public function setPercentualeQuota($percentuale_quota)
    {
        $this->container['percentuale_quota'] = $percentuale_quota;

        return $this;
    }

    /**
     * Gets data_aggiornamento
     *
     * @return string
     */
    public function getDataAggiornamento()
    {
        return $this->container['data_aggiornamento'];
    }

    /**
     * Sets data_aggiornamento
     *
     * @param string $data_aggiornamento Data aggiornamento delle informazioni catastali sull'immobile
     *
     * @return $this
     */
    public function setDataAggiornamento($data_aggiornamento)
    {
        $this->container['data_aggiornamento'] = $data_aggiornamento;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


