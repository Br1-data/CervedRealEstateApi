<?php
/**
 * CointestatariTerrenoRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Real Estate
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CointestatariTerrenoRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CointestatariTerrenoRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CointestatariTerrenoRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'codice_belfiore' => 'string',
        'foglio' => 'string',
        'particella' => 'string',
        'sezione_censuaria' => 'string',
        'denominatore' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'codice_belfiore' => null,
        'foglio' => null,
        'particella' => null,
        'sezione_censuaria' => null,
        'denominatore' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'codice_belfiore' => 'codiceBelfiore',
        'foglio' => 'foglio',
        'particella' => 'particella',
        'sezione_censuaria' => 'sezioneCensuaria',
        'denominatore' => 'denominatore'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'codice_belfiore' => 'setCodiceBelfiore',
        'foglio' => 'setFoglio',
        'particella' => 'setParticella',
        'sezione_censuaria' => 'setSezioneCensuaria',
        'denominatore' => 'setDenominatore'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'codice_belfiore' => 'getCodiceBelfiore',
        'foglio' => 'getFoglio',
        'particella' => 'getParticella',
        'sezione_censuaria' => 'getSezioneCensuaria',
        'denominatore' => 'getDenominatore'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['codice_belfiore'] = isset($data['codice_belfiore']) ? $data['codice_belfiore'] : null;
        $this->container['foglio'] = isset($data['foglio']) ? $data['foglio'] : null;
        $this->container['particella'] = isset($data['particella']) ? $data['particella'] : null;
        $this->container['sezione_censuaria'] = isset($data['sezione_censuaria']) ? $data['sezione_censuaria'] : null;
        $this->container['denominatore'] = isset($data['denominatore']) ? $data['denominatore'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['codice_belfiore'] === null) {
            $invalidProperties[] = "'codice_belfiore' can't be null";
        }
        if ($this->container['foglio'] === null) {
            $invalidProperties[] = "'foglio' can't be null";
        }
        if ($this->container['particella'] === null) {
            $invalidProperties[] = "'particella' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets codice_belfiore
     *
     * @return string
     */
    public function getCodiceBelfiore()
    {
        return $this->container['codice_belfiore'];
    }

    /**
     * Sets codice_belfiore
     *
     * @param string $codice_belfiore Codice Belfiore Comune dell'immobile
     *
     * @return $this
     */
    public function setCodiceBelfiore($codice_belfiore)
    {
        $this->container['codice_belfiore'] = $codice_belfiore;

        return $this;
    }

    /**
     * Gets foglio
     *
     * @return string
     */
    public function getFoglio()
    {
        return $this->container['foglio'];
    }

    /**
     * Sets foglio
     *
     * @param string $foglio Porzione di territorio comunale che il catasto rappresenta nelle proprie mappe cartografiche
     *
     * @return $this
     */
    public function setFoglio($foglio)
    {
        $this->container['foglio'] = $foglio;

        return $this;
    }

    /**
     * Gets particella
     *
     * @return string
     */
    public function getParticella()
    {
        return $this->container['particella'];
    }

    /**
     * Sets particella
     *
     * @param string $particella Rappresenta all'interno del foglio una porzione di terreno o il fabbricato e l'eventuale area di pertinenza, e tranne rare eccezioni viene contrassegnata da un numero
     *
     * @return $this
     */
    public function setParticella($particella)
    {
        $this->container['particella'] = $particella;

        return $this;
    }

    /**
     * Gets sezione_censuaria
     *
     * @return string
     */
    public function getSezioneCensuaria()
    {
        return $this->container['sezione_censuaria'];
    }

    /**
     * Sets sezione_censuaria
     *
     * @param string $sezione_censuaria Per il Catasto fabbricati, dove presente, identifica un bene immobile, compresa la singola unità immobiliare esistente su una particella.Ulteriore suddivisione del territorio comunale che al pari della sezione amministrativa è presente solo in alcuni Comuni (e quindi in generale non è richiesta), indipendentemente dall'esistenza della sezione amministrativa.
     *
     * @return $this
     */
    public function setSezioneCensuaria($sezione_censuaria)
    {
        $this->container['sezione_censuaria'] = $sezione_censuaria;

        return $this;
    }

    /**
     * Gets denominatore
     *
     * @return string
     */
    public function getDenominatore()
    {
        return $this->container['denominatore'];
    }

    /**
     * Sets denominatore
     *
     * @param string $denominatore Dato eventualmente presente solo per immobili che appartengono al Catasto fondiario (province di Trieste e Gorizia e porzioni di quelle di Udine e Belluno)
     *
     * @return $this
     */
    public function setDenominatore($denominatore)
    {
        $this->container['denominatore'] = $denominatore;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


