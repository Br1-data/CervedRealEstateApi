<?php
/**
 * DatiCatastali
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Real Estate
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DatiCatastali Class Doc Comment
 *
 * @category Class
 * @description Dati catastali
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DatiCatastali implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DatiCatastali';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'codice_belfiore' => 'string',
        'codice_comune' => 'string',
        'descrizione_comune' => 'string',
        'codice_provincia' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'codice_belfiore' => null,
        'codice_comune' => null,
        'descrizione_comune' => null,
        'codice_provincia' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'codice_belfiore' => 'codiceBelfiore',
        'codice_comune' => 'codiceComune',
        'descrizione_comune' => 'descrizioneComune',
        'codice_provincia' => 'codiceProvincia'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'codice_belfiore' => 'setCodiceBelfiore',
        'codice_comune' => 'setCodiceComune',
        'descrizione_comune' => 'setDescrizioneComune',
        'codice_provincia' => 'setCodiceProvincia'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'codice_belfiore' => 'getCodiceBelfiore',
        'codice_comune' => 'getCodiceComune',
        'descrizione_comune' => 'getDescrizioneComune',
        'codice_provincia' => 'getCodiceProvincia'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['codice_belfiore'] = isset($data['codice_belfiore']) ? $data['codice_belfiore'] : null;
        $this->container['codice_comune'] = isset($data['codice_comune']) ? $data['codice_comune'] : null;
        $this->container['descrizione_comune'] = isset($data['descrizione_comune']) ? $data['descrizione_comune'] : null;
        $this->container['codice_provincia'] = isset($data['codice_provincia']) ? $data['codice_provincia'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets codice_belfiore
     *
     * @return string
     */
    public function getCodiceBelfiore()
    {
        return $this->container['codice_belfiore'];
    }

    /**
     * Sets codice_belfiore
     *
     * @param string $codice_belfiore Codice Belfiore del comune dell'immobile
     *
     * @return $this
     */
    public function setCodiceBelfiore($codice_belfiore)
    {
        $this->container['codice_belfiore'] = $codice_belfiore;

        return $this;
    }

    /**
     * Gets codice_comune
     *
     * @return string
     */
    public function getCodiceComune()
    {
        return $this->container['codice_comune'];
    }

    /**
     * Sets codice_comune
     *
     * @param string $codice_comune Codice Comune Cerved dell'immobile
     *
     * @return $this
     */
    public function setCodiceComune($codice_comune)
    {
        $this->container['codice_comune'] = $codice_comune;

        return $this;
    }

    /**
     * Gets descrizione_comune
     *
     * @return string
     */
    public function getDescrizioneComune()
    {
        return $this->container['descrizione_comune'];
    }

    /**
     * Sets descrizione_comune
     *
     * @param string $descrizione_comune Comune dell'immobile
     *
     * @return $this
     */
    public function setDescrizioneComune($descrizione_comune)
    {
        $this->container['descrizione_comune'] = $descrizione_comune;

        return $this;
    }

    /**
     * Gets codice_provincia
     *
     * @return string
     */
    public function getCodiceProvincia()
    {
        return $this->container['codice_provincia'];
    }

    /**
     * Sets codice_provincia
     *
     * @param string $codice_provincia Codice Provincia dell'immobile
     *
     * @return $this
     */
    public function setCodiceProvincia($codice_provincia)
    {
        $this->container['codice_provincia'] = $codice_provincia;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


