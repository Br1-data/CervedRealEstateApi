<?php
/**
 * StimaFabbricato
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Real Estate
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * StimaFabbricato Class Doc Comment
 *
 * @category Class
 * @description Stima Fabbricato
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StimaFabbricato implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StimaFabbricato';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'valore_min_normale' => 'float',
        'valore_max_normale' => 'float',
        'valore_min_ottimo' => 'float',
        'valore_max_ottimo' => 'float',
        'valore_min_scadente' => 'float',
        'valore_max_scadente' => 'float',
        'valore_puntuale' => 'float',
        'livello_confidenza' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'valore_min_normale' => null,
        'valore_max_normale' => null,
        'valore_min_ottimo' => null,
        'valore_max_ottimo' => null,
        'valore_min_scadente' => null,
        'valore_max_scadente' => null,
        'valore_puntuale' => null,
        'livello_confidenza' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'valore_min_normale' => 'valoreMinNormale',
        'valore_max_normale' => 'valoreMaxNormale',
        'valore_min_ottimo' => 'valoreMinOttimo',
        'valore_max_ottimo' => 'valoreMaxOttimo',
        'valore_min_scadente' => 'valoreMinScadente',
        'valore_max_scadente' => 'valoreMaxScadente',
        'valore_puntuale' => 'valorePuntuale',
        'livello_confidenza' => 'livelloConfidenza'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'valore_min_normale' => 'setValoreMinNormale',
        'valore_max_normale' => 'setValoreMaxNormale',
        'valore_min_ottimo' => 'setValoreMinOttimo',
        'valore_max_ottimo' => 'setValoreMaxOttimo',
        'valore_min_scadente' => 'setValoreMinScadente',
        'valore_max_scadente' => 'setValoreMaxScadente',
        'valore_puntuale' => 'setValorePuntuale',
        'livello_confidenza' => 'setLivelloConfidenza'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'valore_min_normale' => 'getValoreMinNormale',
        'valore_max_normale' => 'getValoreMaxNormale',
        'valore_min_ottimo' => 'getValoreMinOttimo',
        'valore_max_ottimo' => 'getValoreMaxOttimo',
        'valore_min_scadente' => 'getValoreMinScadente',
        'valore_max_scadente' => 'getValoreMaxScadente',
        'valore_puntuale' => 'getValorePuntuale',
        'livello_confidenza' => 'getLivelloConfidenza'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['valore_min_normale'] = isset($data['valore_min_normale']) ? $data['valore_min_normale'] : null;
        $this->container['valore_max_normale'] = isset($data['valore_max_normale']) ? $data['valore_max_normale'] : null;
        $this->container['valore_min_ottimo'] = isset($data['valore_min_ottimo']) ? $data['valore_min_ottimo'] : null;
        $this->container['valore_max_ottimo'] = isset($data['valore_max_ottimo']) ? $data['valore_max_ottimo'] : null;
        $this->container['valore_min_scadente'] = isset($data['valore_min_scadente']) ? $data['valore_min_scadente'] : null;
        $this->container['valore_max_scadente'] = isset($data['valore_max_scadente']) ? $data['valore_max_scadente'] : null;
        $this->container['valore_puntuale'] = isset($data['valore_puntuale']) ? $data['valore_puntuale'] : null;
        $this->container['livello_confidenza'] = isset($data['livello_confidenza']) ? $data['livello_confidenza'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets valore_min_normale
     *
     * @return float
     */
    public function getValoreMinNormale()
    {
        return $this->container['valore_min_normale'];
    }

    /**
     * Sets valore_min_normale
     *
     * @param float $valore_min_normale Prezzo minimo di vendita per stato conservativo normale
     *
     * @return $this
     */
    public function setValoreMinNormale($valore_min_normale)
    {
        $this->container['valore_min_normale'] = $valore_min_normale;

        return $this;
    }

    /**
     * Gets valore_max_normale
     *
     * @return float
     */
    public function getValoreMaxNormale()
    {
        return $this->container['valore_max_normale'];
    }

    /**
     * Sets valore_max_normale
     *
     * @param float $valore_max_normale Prezzo massimo di vendita per stato conservativo normale
     *
     * @return $this
     */
    public function setValoreMaxNormale($valore_max_normale)
    {
        $this->container['valore_max_normale'] = $valore_max_normale;

        return $this;
    }

    /**
     * Gets valore_min_ottimo
     *
     * @return float
     */
    public function getValoreMinOttimo()
    {
        return $this->container['valore_min_ottimo'];
    }

    /**
     * Sets valore_min_ottimo
     *
     * @param float $valore_min_ottimo Prezzo minimo di vendita per stato conservativo ottimo
     *
     * @return $this
     */
    public function setValoreMinOttimo($valore_min_ottimo)
    {
        $this->container['valore_min_ottimo'] = $valore_min_ottimo;

        return $this;
    }

    /**
     * Gets valore_max_ottimo
     *
     * @return float
     */
    public function getValoreMaxOttimo()
    {
        return $this->container['valore_max_ottimo'];
    }

    /**
     * Sets valore_max_ottimo
     *
     * @param float $valore_max_ottimo Prezzo massimo di vendita per stato conservativo ottimo
     *
     * @return $this
     */
    public function setValoreMaxOttimo($valore_max_ottimo)
    {
        $this->container['valore_max_ottimo'] = $valore_max_ottimo;

        return $this;
    }

    /**
     * Gets valore_min_scadente
     *
     * @return float
     */
    public function getValoreMinScadente()
    {
        return $this->container['valore_min_scadente'];
    }

    /**
     * Sets valore_min_scadente
     *
     * @param float $valore_min_scadente Prezzo minimo di vendita per stato conservativo scadente
     *
     * @return $this
     */
    public function setValoreMinScadente($valore_min_scadente)
    {
        $this->container['valore_min_scadente'] = $valore_min_scadente;

        return $this;
    }

    /**
     * Gets valore_max_scadente
     *
     * @return float
     */
    public function getValoreMaxScadente()
    {
        return $this->container['valore_max_scadente'];
    }

    /**
     * Sets valore_max_scadente
     *
     * @param float $valore_max_scadente Prezzo massimo di vendita per stato conservativo scadente
     *
     * @return $this
     */
    public function setValoreMaxScadente($valore_max_scadente)
    {
        $this->container['valore_max_scadente'] = $valore_max_scadente;

        return $this;
    }

    /**
     * Gets valore_puntuale
     *
     * @return float
     */
    public function getValorePuntuale()
    {
        return $this->container['valore_puntuale'];
    }

    /**
     * Sets valore_puntuale
     *
     * @param float $valore_puntuale Valore puntuale di stima
     *
     * @return $this
     */
    public function setValorePuntuale($valore_puntuale)
    {
        $this->container['valore_puntuale'] = $valore_puntuale;

        return $this;
    }

    /**
     * Gets livello_confidenza
     *
     * @return float
     */
    public function getLivelloConfidenza()
    {
        return $this->container['livello_confidenza'];
    }

    /**
     * Sets livello_confidenza
     *
     * @param float $livello_confidenza Livello di confidenza di stima
     *
     * @return $this
     */
    public function setLivelloConfidenza($livello_confidenza)
    {
        $this->container['livello_confidenza'] = $livello_confidenza;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


