<?php
/**
 * Terreni
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Real Estate
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Terreni Class Doc Comment
 *
 * @category Class
 * @description Lista dei terreni
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Terreni implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Terreni';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id_immobile' => 'float',
        'classe' => 'string',
        'codice_belfiore' => 'string',
        'codice_comune' => 'string',
        'descrizione_comune' => 'string',
        'codice_provincia' => 'string',
        'foglio' => 'string',
        'particella' => 'string',
        'denominatore_particella' => 'string',
        'subalterno' => 'int',
        'sezione_censuaria' => 'string',
        'codice_porzione' => 'string',
        'qualita' => 'string',
        'superficie_ettari' => 'float',
        'superficie_are' => 'float',
        'superficie_centiare' => 'float',
        'rendita_dominicale' => 'float',
        'rendita_agraria' => 'float',
        'possessi' => '\Swagger\Client\Model\Possessi[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id_immobile' => null,
        'classe' => null,
        'codice_belfiore' => null,
        'codice_comune' => null,
        'descrizione_comune' => null,
        'codice_provincia' => null,
        'foglio' => null,
        'particella' => null,
        'denominatore_particella' => null,
        'subalterno' => null,
        'sezione_censuaria' => null,
        'codice_porzione' => null,
        'qualita' => null,
        'superficie_ettari' => null,
        'superficie_are' => null,
        'superficie_centiare' => null,
        'rendita_dominicale' => null,
        'rendita_agraria' => null,
        'possessi' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id_immobile' => 'idImmobile',
        'classe' => 'classe',
        'codice_belfiore' => 'codiceBelfiore',
        'codice_comune' => 'codiceComune',
        'descrizione_comune' => 'descrizioneComune',
        'codice_provincia' => 'codiceProvincia',
        'foglio' => 'foglio',
        'particella' => 'particella',
        'denominatore_particella' => 'denominatoreParticella',
        'subalterno' => 'subalterno',
        'sezione_censuaria' => 'sezioneCensuaria',
        'codice_porzione' => 'codicePorzione',
        'qualita' => 'qualita',
        'superficie_ettari' => 'superficieEttari',
        'superficie_are' => 'superficieAre',
        'superficie_centiare' => 'superficieCentiare',
        'rendita_dominicale' => 'renditaDominicale',
        'rendita_agraria' => 'renditaAgraria',
        'possessi' => 'possessi'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id_immobile' => 'setIdImmobile',
        'classe' => 'setClasse',
        'codice_belfiore' => 'setCodiceBelfiore',
        'codice_comune' => 'setCodiceComune',
        'descrizione_comune' => 'setDescrizioneComune',
        'codice_provincia' => 'setCodiceProvincia',
        'foglio' => 'setFoglio',
        'particella' => 'setParticella',
        'denominatore_particella' => 'setDenominatoreParticella',
        'subalterno' => 'setSubalterno',
        'sezione_censuaria' => 'setSezioneCensuaria',
        'codice_porzione' => 'setCodicePorzione',
        'qualita' => 'setQualita',
        'superficie_ettari' => 'setSuperficieEttari',
        'superficie_are' => 'setSuperficieAre',
        'superficie_centiare' => 'setSuperficieCentiare',
        'rendita_dominicale' => 'setRenditaDominicale',
        'rendita_agraria' => 'setRenditaAgraria',
        'possessi' => 'setPossessi'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id_immobile' => 'getIdImmobile',
        'classe' => 'getClasse',
        'codice_belfiore' => 'getCodiceBelfiore',
        'codice_comune' => 'getCodiceComune',
        'descrizione_comune' => 'getDescrizioneComune',
        'codice_provincia' => 'getCodiceProvincia',
        'foglio' => 'getFoglio',
        'particella' => 'getParticella',
        'denominatore_particella' => 'getDenominatoreParticella',
        'subalterno' => 'getSubalterno',
        'sezione_censuaria' => 'getSezioneCensuaria',
        'codice_porzione' => 'getCodicePorzione',
        'qualita' => 'getQualita',
        'superficie_ettari' => 'getSuperficieEttari',
        'superficie_are' => 'getSuperficieAre',
        'superficie_centiare' => 'getSuperficieCentiare',
        'rendita_dominicale' => 'getRenditaDominicale',
        'rendita_agraria' => 'getRenditaAgraria',
        'possessi' => 'getPossessi'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id_immobile'] = isset($data['id_immobile']) ? $data['id_immobile'] : null;
        $this->container['classe'] = isset($data['classe']) ? $data['classe'] : null;
        $this->container['codice_belfiore'] = isset($data['codice_belfiore']) ? $data['codice_belfiore'] : null;
        $this->container['codice_comune'] = isset($data['codice_comune']) ? $data['codice_comune'] : null;
        $this->container['descrizione_comune'] = isset($data['descrizione_comune']) ? $data['descrizione_comune'] : null;
        $this->container['codice_provincia'] = isset($data['codice_provincia']) ? $data['codice_provincia'] : null;
        $this->container['foglio'] = isset($data['foglio']) ? $data['foglio'] : null;
        $this->container['particella'] = isset($data['particella']) ? $data['particella'] : null;
        $this->container['denominatore_particella'] = isset($data['denominatore_particella']) ? $data['denominatore_particella'] : null;
        $this->container['subalterno'] = isset($data['subalterno']) ? $data['subalterno'] : null;
        $this->container['sezione_censuaria'] = isset($data['sezione_censuaria']) ? $data['sezione_censuaria'] : null;
        $this->container['codice_porzione'] = isset($data['codice_porzione']) ? $data['codice_porzione'] : null;
        $this->container['qualita'] = isset($data['qualita']) ? $data['qualita'] : null;
        $this->container['superficie_ettari'] = isset($data['superficie_ettari']) ? $data['superficie_ettari'] : null;
        $this->container['superficie_are'] = isset($data['superficie_are']) ? $data['superficie_are'] : null;
        $this->container['superficie_centiare'] = isset($data['superficie_centiare']) ? $data['superficie_centiare'] : null;
        $this->container['rendita_dominicale'] = isset($data['rendita_dominicale']) ? $data['rendita_dominicale'] : null;
        $this->container['rendita_agraria'] = isset($data['rendita_agraria']) ? $data['rendita_agraria'] : null;
        $this->container['possessi'] = isset($data['possessi']) ? $data['possessi'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id_immobile
     *
     * @return float
     */
    public function getIdImmobile()
    {
        return $this->container['id_immobile'];
    }

    /**
     * Sets id_immobile
     *
     * @param float $id_immobile Identificativo univoco Cerved dell'immobile
     *
     * @return $this
     */
    public function setIdImmobile($id_immobile)
    {
        $this->container['id_immobile'] = $id_immobile;

        return $this;
    }

    /**
     * Gets classe
     *
     * @return string
     */
    public function getClasse()
    {
        return $this->container['classe'];
    }

    /**
     * Sets classe
     *
     * @param string $classe Parametro che identifica il grado di produttività  delle particelle interessate da una qualità  di coltura. Viene indicata con 'U' (unica) in assenza di una ripartizione in classi della categoria (ciò, in quanto, la redditività  è omogenea all'interno del Comune o della zona censuaria) ovvero con i numeri da '1' a 'n' dove la classe 1 rappresenta quella di maggior reddito
     *
     * @return $this
     */
    public function setClasse($classe)
    {
        $this->container['classe'] = $classe;

        return $this;
    }

    /**
     * Gets codice_belfiore
     *
     * @return string
     */
    public function getCodiceBelfiore()
    {
        return $this->container['codice_belfiore'];
    }

    /**
     * Sets codice_belfiore
     *
     * @param string $codice_belfiore Codice Belfiore del comune dell'immobile
     *
     * @return $this
     */
    public function setCodiceBelfiore($codice_belfiore)
    {
        $this->container['codice_belfiore'] = $codice_belfiore;

        return $this;
    }

    /**
     * Gets codice_comune
     *
     * @return string
     */
    public function getCodiceComune()
    {
        return $this->container['codice_comune'];
    }

    /**
     * Sets codice_comune
     *
     * @param string $codice_comune Codice Comune Cerved dell'immobile
     *
     * @return $this
     */
    public function setCodiceComune($codice_comune)
    {
        $this->container['codice_comune'] = $codice_comune;

        return $this;
    }

    /**
     * Gets descrizione_comune
     *
     * @return string
     */
    public function getDescrizioneComune()
    {
        return $this->container['descrizione_comune'];
    }

    /**
     * Sets descrizione_comune
     *
     * @param string $descrizione_comune Comune dell'immobile
     *
     * @return $this
     */
    public function setDescrizioneComune($descrizione_comune)
    {
        $this->container['descrizione_comune'] = $descrizione_comune;

        return $this;
    }

    /**
     * Gets codice_provincia
     *
     * @return string
     */
    public function getCodiceProvincia()
    {
        return $this->container['codice_provincia'];
    }

    /**
     * Sets codice_provincia
     *
     * @param string $codice_provincia Codice Provincia dell'immobile
     *
     * @return $this
     */
    public function setCodiceProvincia($codice_provincia)
    {
        $this->container['codice_provincia'] = $codice_provincia;

        return $this;
    }

    /**
     * Gets foglio
     *
     * @return string
     */
    public function getFoglio()
    {
        return $this->container['foglio'];
    }

    /**
     * Sets foglio
     *
     * @param string $foglio Porzione di territorio comunale che il catasto rappresenta nelle proprie mappe cartografiche
     *
     * @return $this
     */
    public function setFoglio($foglio)
    {
        $this->container['foglio'] = $foglio;

        return $this;
    }

    /**
     * Gets particella
     *
     * @return string
     */
    public function getParticella()
    {
        return $this->container['particella'];
    }

    /**
     * Sets particella
     *
     * @param string $particella Rappresenta all'interno del foglio una porzione di terreno o il fabbricato e l'eventuale area di pertinenza, e tranne rare eccezioni viene contrassegnata da un numero
     *
     * @return $this
     */
    public function setParticella($particella)
    {
        $this->container['particella'] = $particella;

        return $this;
    }

    /**
     * Gets denominatore_particella
     *
     * @return string
     */
    public function getDenominatoreParticella()
    {
        return $this->container['denominatore_particella'];
    }

    /**
     * Sets denominatore_particella
     *
     * @param string $denominatore_particella Dato eventualmente presente solo per immobili che appartengono al Catasto fondiario (province di Trieste e Gorizia e porzioni di quelle di Udine e Belluno)
     *
     * @return $this
     */
    public function setDenominatoreParticella($denominatore_particella)
    {
        $this->container['denominatore_particella'] = $denominatore_particella;

        return $this;
    }

    /**
     * Gets subalterno
     *
     * @return int
     */
    public function getSubalterno()
    {
        return $this->container['subalterno'];
    }

    /**
     * Sets subalterno
     *
     * @param int $subalterno Per il Catasto fabbricati, dove presente, identifica un bene immobile, compresa la singola unità  immobiliare esistente su una particella. L'unità  immobiliare urbana è l'elemento minimo inventariabile che ha autonomia reddituale e funzionale. Generalmente nell'ipotesi di un intero fabbricato ciascuna unità immobiliare è identificata da un proprio subalterno. Qualora il fabbricato sia costituito da un'unica unità immobiliare il subalterno potrebbe essere assente. Il dato, qualora esistente, è necessario per l'univoca identificazione della singola unità  immobiliare; diversamente, il sistema produrrà  l'elenco delle unità immobiliari urbane aventi stessa particella al fine della loro successiva selezione singola. Per il Catasto terreni, dove presente essenzialmente si riferisce ai fabbricati rurali
     *
     * @return $this
     */
    public function setSubalterno($subalterno)
    {
        $this->container['subalterno'] = $subalterno;

        return $this;
    }

    /**
     * Gets sezione_censuaria
     *
     * @return string
     */
    public function getSezioneCensuaria()
    {
        return $this->container['sezione_censuaria'];
    }

    /**
     * Sets sezione_censuaria
     *
     * @param string $sezione_censuaria Suddivisione territoriale del Comune catastale. E' identificata da una lettera e da una denominazione
     *
     * @return $this
     */
    public function setSezioneCensuaria($sezione_censuaria)
    {
        $this->container['sezione_censuaria'] = $sezione_censuaria;

        return $this;
    }

    /**
     * Gets codice_porzione
     *
     * @return string
     */
    public function getCodicePorzione()
    {
        return $this->container['codice_porzione'];
    }

    /**
     * Sets codice_porzione
     *
     * @param string $codice_porzione In caso di terreno porzionato è il codice identificativo della porzione in cui è suddiviso il terreno
     *
     * @return $this
     */
    public function setCodicePorzione($codice_porzione)
    {
        $this->container['codice_porzione'] = $codice_porzione;

        return $this;
    }

    /**
     * Gets qualita
     *
     * @return string
     */
    public function getQualita()
    {
        return $this->container['qualita'];
    }

    /**
     * Sets qualita
     *
     * @param string $qualita Tipo di macrocoltura agraria attribuita a una particella del Catasto terreni, o sua porzione, avente rilevanza ai fini della conservazione del Catasto. Qualora la particella sia suddivisa in porzioni che presentano colturali diverse viene riportata la dicitura \"Modello 26\" senza ulteriori dettagli disponibili solo attraverso una visura ordinaria
     *
     * @return $this
     */
    public function setQualita($qualita)
    {
        $this->container['qualita'] = $qualita;

        return $this;
    }

    /**
     * Gets superficie_ettari
     *
     * @return float
     */
    public function getSuperficieEttari()
    {
        return $this->container['superficie_ettari'];
    }

    /**
     * Sets superficie_ettari
     *
     * @param float $superficie_ettari Superficie in ettari del terreno
     *
     * @return $this
     */
    public function setSuperficieEttari($superficie_ettari)
    {
        $this->container['superficie_ettari'] = $superficie_ettari;

        return $this;
    }

    /**
     * Gets superficie_are
     *
     * @return float
     */
    public function getSuperficieAre()
    {
        return $this->container['superficie_are'];
    }

    /**
     * Sets superficie_are
     *
     * @param float $superficie_are Superficie in are del terreno
     *
     * @return $this
     */
    public function setSuperficieAre($superficie_are)
    {
        $this->container['superficie_are'] = $superficie_are;

        return $this;
    }

    /**
     * Gets superficie_centiare
     *
     * @return float
     */
    public function getSuperficieCentiare()
    {
        return $this->container['superficie_centiare'];
    }

    /**
     * Sets superficie_centiare
     *
     * @param float $superficie_centiare Superficie in centiare del terreno
     *
     * @return $this
     */
    public function setSuperficieCentiare($superficie_centiare)
    {
        $this->container['superficie_centiare'] = $superficie_centiare;

        return $this;
    }

    /**
     * Gets rendita_dominicale
     *
     * @return float
     */
    public function getRenditaDominicale()
    {
        return $this->container['rendita_dominicale'];
    }

    /**
     * Sets rendita_dominicale
     *
     * @param float $rendita_dominicale Parte del reddito medio ordinario ritraibile dall'esercizio delle attività  agricole, che spetta al proprietario del terreno. è correlato alla qualità  del terreno e alla sua produttività media ordinaria
     *
     * @return $this
     */
    public function setRenditaDominicale($rendita_dominicale)
    {
        $this->container['rendita_dominicale'] = $rendita_dominicale;

        return $this;
    }

    /**
     * Gets rendita_agraria
     *
     * @return float
     */
    public function getRenditaAgraria()
    {
        return $this->container['rendita_agraria'];
    }

    /**
     * Sets rendita_agraria
     *
     * @param float $rendita_agraria Parte del reddito medio ordinario dei terreni imputabile al capitale di esercizio e al lavoro di organizzazione impiegati, nei limiti della potenzialità  del terreno, nell'esercizio delle attività  agricole. è correlato alla qualità del terreno e alla sua produttività media ordinaria
     *
     * @return $this
     */
    public function setRenditaAgraria($rendita_agraria)
    {
        $this->container['rendita_agraria'] = $rendita_agraria;

        return $this;
    }

    /**
     * Gets possessi
     *
     * @return \Swagger\Client\Model\Possessi[]
     */
    public function getPossessi()
    {
        return $this->container['possessi'];
    }

    /**
     * Sets possessi
     *
     * @param \Swagger\Client\Model\Possessi[] $possessi Possessi
     *
     * @return $this
     */
    public function setPossessi($possessi)
    {
        $this->container['possessi'] = $possessi;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


